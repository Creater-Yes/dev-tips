using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Web.Security;
using System.Xml;
using System.IO;
using System.Text;

public partial class tongji : System.Web.UI.Page
{
    const string Token = "liuyw"; //你的token
    protected void Page_Load(object sender, EventArgs e)
    {
        string postStr = "";
        WriteLog("传递到了页面。。。");
        // Valid();
        if (Request.HttpMethod.ToLower() == "post")
        {
            WriteLog("请求为post");
            Stream s = System.Web.HttpContext.Current.Request.InputStream;
            byte[] b = new byte[s.Length];
            s.Read(b, 0, (int)s.Length);
            postStr = Encoding.UTF8.GetString(b);
            if (!string.IsNullOrEmpty(postStr))
            {
                string textTpl = "";
                ResponseMsg(postStr);
                WriteLog("得到了输入的pststr");
                WriteLog(postStr);
                //xml读取流
                XmlDocument px;
                try
                {
                //    WriteLog("1");
                    px = new XmlDocument();

                    px.LoadXml(postStr);

                   

               //     WriteLog("2");
                    string fromUsername = px.GetElementsByTagName("FromUserName")[0].InnerText;
                    string toUsername = px.GetElementsByTagName("ToUserName")[0].InnerText;
                    string keyword = px.GetElementsByTagName("Content")[0].InnerText;

                    DateTime dt = DateTime.Now;

                    string reply = "您好,您的微信账号为:" + fromUsername + "，这里是刘彦玮公众平台，测试版v1.0.0.0，采用开发模式回复消息,每次返回的系统时间，是无法通过编辑模式设置关键字实现的。";
                    reply += "您刚刚发来的消息为“" + keyword + "”";
                    reply += "当前系统日期:" + dt.ToLongDateString();
                    reply += "当前系统时间:" + dt.ToLongTimeString();
                    reply += "更多功能敬请期待";

                //    WriteLog("3");
                    textTpl = "<xml> <ToUserName><![CDATA[" + fromUsername + @"]]></ToUserName>";
                //    WriteLog(textTpl);
                    textTpl += "<FromUserName><![CDATA[" + toUsername + @"]]></FromUserName>";
                 //   WriteLog(textTpl);
                    textTpl += "<CreateTime></CreateTime>";
                //    WriteLog(textTpl);
                    textTpl += "<MsgType><![CDATA[text]]></MsgType>";
                //    WriteLog(textTpl);
                    textTpl += "<Content><![CDATA[" + reply + "]]></Content>";
                //    WriteLog(textTpl);
                    textTpl += "<FuncFlag>0</FuncFlag>";
               //     WriteLog(textTpl);
                    textTpl += "</xml>";
                   // WriteLog("得到了输出的textTpl");
                  //  WriteLog(textTpl);
                    //ResponseMsg(postStr);
                }
                catch (Exception ex)
                {
                   
                    WriteLog("回复消息时出错");
                    WriteLog("错误的postStr-----------------");
                    WriteLog(textTpl);
                    WriteLog(ex.Message);
                }
                HttpContext.Current.Response.Write(textTpl);

                WriteLog("结束");
            }

        }
        else
        {
            HttpContext.Current.Response.Write("当前为get协议");
            WriteLog("当前为get协议");
        }
    }
    ///
    /// 验证微信签名
    ///
    /// * 将token、timestamp、nonce三个参数进行字典序排序
    /// * 将三个参数字符串拼接成一个字符串进行sha1加密
    /// * 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信。
    ///
    private bool CheckSignature()
    {
        string signature = Request.QueryString["signature"].ToString();
        string timestamp = Request.QueryString["timestamp"].ToString();
        string nonce = Request.QueryString["nonce"].ToString();
        string[] ArrTmp = { Token, timestamp, nonce };
        Array.Sort(ArrTmp);     //字典排序
        string tmpStr = string.Join("", ArrTmp);
        tmpStr = FormsAuthentication.HashPasswordForStoringInConfigFile(tmpStr, "SHA1");
        tmpStr = tmpStr.ToLower();
        if (tmpStr == signature)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void Valid()
    {
        WriteLog("开始验证。。。");
        string echoStr = "";
        try
        {
            echoStr = Request.QueryString["echoStr"].ToString();
        }
        catch
        {
            WriteLog("开始验证。。。");
        }
        if (CheckSignature())
        {
            WriteLog("  string echoStr = Request.QueryString[echoStr].ToString()出错");
            if (!string.IsNullOrEmpty(echoStr))
            {
                Response.Write(echoStr);
                Response.End();
            }
        }
        else
        {
            WriteLog("验证失败");
        }
    }

    ///
    /// 返回信息结果(微信信息返回)
    ///
    ///
    private void ResponseMsg(string weixinXML)
    {
        //回复消息的部分:你的代码写在这里


    }



    ///
    /// unix时间转换为datetime
    ///
    ///
    ///
    private DateTime UnixTimeToTime(string timeStamp)
    {
        DateTime dtStart = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1));
        long lTime = long.Parse(timeStamp + "0000000");
        TimeSpan toNow = new TimeSpan(lTime);
        return dtStart.Add(toNow);
    }

    ///
    /// datetime转换为unixtime
    ///
    ///
    ///
    private int ConvertDateTimeInt(System.DateTime time)
    {
        System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1));
        return (int)(time - startTime).TotalSeconds;
    }

    ///
    /// 写日志(用于跟踪)
    ///
    private void WriteLog(string strMemo)
    {
        string filename = Server.MapPath("/ContentShareSystem/Api/logs/log.txt");
        if (!Directory.Exists(Server.MapPath("//ContentShareSystem/Api/logs//")))
            Directory.CreateDirectory("//ContentShareSystem/Api/logs//");
        StreamWriter sr = null;
        try
        {
            if (!File.Exists(filename))
            {
                sr = File.CreateText(filename);
            }
            else
            {
                sr = File.AppendText(filename);
            }
            sr.WriteLine(strMemo);
        }
        catch
        {
        }
        finally
        {
            if (sr != null)
                sr.Close();
        }
    }

}