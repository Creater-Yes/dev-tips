 spring 4.15 RESTapi：
 1：配置spring环境，引入类库 spring + log + json-lib
 web.xml
 <servlet>
        <servlet-name>springMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/springMVC.xml</param-value>
        </init-param>       
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!-- Spring配置 -->
    <!-- ====================================== -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>

springMVC.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"

    xsi:schemaLocation=" 
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!-- 设置使用注解的类所在的jar包 -->
    <context:component-scan base-package="com.liu"></context:component-scan>
    <mvc:annotation-driven  content-negotiation-manager="contentNegotiationManager" />
    <bean id="contentNegotiationManager"
        class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- Turn off working out content type based on URL file extension, should
            fall back to looking at the Accept headers -->
        <property name="favorPathExtension" value="false" />
    </bean>
    <!-- 启用spring mvc 注解 -->
    <!-- <context:annotation-config /> <mvc:annotation-driven /> -->
    <!-- 开启注解 -->
    <!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/> -->
    <!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/> --><!-- -->

 



    <!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/jsp/" p:suffix=".jsp" />
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->


</beans>

2:controller !!  response.setContentType("application/json;charset=utf-8");  response.getWriter().write(json.toString());
        
 
@RestController
@RequestMapping("/api")
public class RESTTestController {
    @RequestMapping("/ajax")    
    public  @ResponseBody void ajax(HttpServletRequest request ,HttpServletResponse response) throws IOException {
         System.out.println("RESTTestController ajax");
         Person liu = new Person();
         liu.setAge("30");
         liu.setName("liuyanwei");
         
         List<String> list = new ArrayList<String>();
         list.add("123");
         list.add("1asds");
         JSONObject json = JSONObject.fromObject(liu);
         JSONArray array = JSONArray.fromObject(list);
         System.out.println(array.toString());
 
         response.setContentType("application/json;charset=utf-8");
         response.getWriter().write(json.toString());
        }
    
  
     
}

3:路由参数的获取
@RequestMapping(value="/news/{newsid}",method = RequestMethod.GET)  //RequestMethod.POST     
    public  @ResponseBody void Details(@PathVariable("newsid") String newsid,HttpServletResponse response) throws IOException {
        
        System.out.println(newsid);
        response.setContentType("application/json;charset=utf-8");   
        response.getWriter().write( "{\"newsid\" : "+ newsid +"}");
                 
}

4：请求参数的获取
//http://localhost:8080/springMVC/api/news/search?agemin=20&name=liuyanwei
@RequestMapping(value="/news/search",method = RequestMethod.GET)     
public @ResponseBody void Details(
                HttpServletResponse response,
                @RequestParam("name") String name,
                @RequestParam("agemin") String agemin,      
                @RequestParam(value="level",required=false,defaultValue="high") String level
                ) throws IOException 
{
          
    response.setContentType("application/json;charset=utf-8");   
    response.getWriter().write( "{\"name\" : "+ name +",\"agemin1\" : "+ agemin +"},\"level\" : "+ level +"}");
             
}